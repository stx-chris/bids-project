---
title: "RNA-Sequenzierungs-Analyse - Aufgaben"
author: "Patrick Metzger - Institut für Medizinische Bioinformatik und Systemmedizin"
format:
  html:
    toc: true
    number-sections: true
    df-print: paged
    code-fold: true
    embed-resources: true
execute:
  cache: true
  echo: true
  warning: false
  error: false
---

# Einführung

Wir bitten euch hier, die grundlegenden Schritte einer RNA-Sequenzierungs-Analyse durchzuführen. Wir stellen euch bereits die auf das menschliche Referenzgenom ausgerichteten Reads zur Verfügung, d.h. euer Ausgangspunkt sind die "Raw Counts" für alle Gene jeder Probe. Zusammen mit den Counts stellen wir euch die Annotationstabelle zur Verfügung, die die Proben-IDs mit den tatsächlichen biologischen Bedingungen verknüpft. Der Datensatz stammt aus einem wissenschaftlichen Projekt, an dem wir hier in Freiburg arbeiten. Der Datensatz enthält Expressionsdaten eines Rektumadenokarzinoms, welches Varianten in ***BRAF^D594G^***, ***KRAS^G12A^*** und ***TP53^R175H^*** trägt. Mit dem RNA-Seq-Experiment soll untersucht werden, welchen Einfluss die Medikamente **Sorafenib** und **Trametinib** auf das Expressionsmuster der Tumorzellen haben. Um die Vergleiche vornehme zu können wurde ebenfalls eine Kontrollprobe mit **Dimethylsulfoxid** (DMSO) generiert. DMSO wurde gewählt, da die Medikamente darin gelöst sind, um sie den Zellen zuverabreichen. Wir betrachten im folgenden also die biologischen Bedingungen **DMSO**, **Sorafenib** (Sora) und **Trametinib** (Tram). Für alle Bedingungen liegen zwei biologische Replikate vor.

Das Ziel dieser Aufgabe ist es die signifikant veränderten Gene zwischen der Kontrolle (DMSO) und den beiden Behandlungen (Sora und Tram) zu finden. Des weiteren interssiert uns auch, ob es Unterschiede zwischen den Behandlungen gibt. Dabei hilft uns in beiden Fällen die Analyse der differentiell exprimierten Gene (DEG).

Im folgenden beschreiben wir die Aufgaben und geben euch weitere Hinweise und Erklärungen.

Wir werden in den nächsten Wochen schrittweise folgende Punkte bearbeiten:

1.  Importieren der Count Daten und erstellen einer Count Matrix
2.  Verknüpfung der Daten zu tatsächlichen biologischen Bedingungen
3.  Erstellen einer Tabelle, die alle Gene und ihre zugehörigen Gen-Identifikatoren enthält.
4.  Berechnung einer Hauptkomponentenanalyse (PCA), um einen ersten Überblick über den Datensatz zu erhalten
5.  Die DEG-Analyse
6.  Vergleich zwischen den Medikamenten
7.  Gene-Set Enrichment Analyse (GSEA)
8.  Visualisieren und Exportieren der Ergebnisse

Daraus resultieren folgende Aufgaben/ Fragen für euch. Wir haben diese auf die drei verbleibenden Wochen aufgeteilt. Weitere Details findet ihr fortlaufend in diesem Dokument.

**Aufgaben/ Fragen Woche 4**

Vorbereitung:

1.  Importiert die Count-Daten und erstellt daraus eine Count-Matrix
2.  Erstellt eine Tabelle, die alle gemessenen Gene und all ihre verschiedenen IDs enthält.
3.  Ordnet den Proben ihre biologische Bedingung zu
4.  Erstellt das DESeq2 Objekt und normalisiert die Daten
5.  Erstellt zwei QC Abbildungen, einmal mit den Roh-Counts und einmal mit den normalisierten Count-Werten.

**Aufgaben/ Fragen Woche 5**

DEG-Analyse:

1.  Berechnet eine Principal Component Analysis (PCA) und stellt diese grafisch dar.
2.  Baut auf dem DESeq2 Objekt auf und führt die *"Differentially Expressed Genes"* (DEG) Analyse durch.
    i)  Bestimmt die DEGs für die beiden Vergleiche Sorafenib vs DMSO und Trametinib vs DMSO
    ii) Wie viele DEGs konntet ihr pro Vergleich identifizieren? (Cutoff padj \< 0.05)
    iii) Wie verteilen sich die Anzahl der DEGs auf hoch- bzw. runter-reguliert? (log2FoldChange \> bzw. \< 0)
    iv) Stellt die Anzahlen grafisch z.B. als Barplot dar.
3.  Baut die signifikanten DEGs als Übersichtstabellen ins HTML ein.
4.  Stellt die Ergebnisse der DEG-Analyse mit Hilfe eines *Volcano Plots* dar.

**Aufgabe/ Fragen Woche 6**

Vergleich der beiden Medikamente:

1.  Findet Gemeinsamkeiten und Unterschiede zwischen den beiden Medikamenten im Vergleich zu DMSO.
2.  Wendet einen Exakten Test nach Fischer an um aus den Genen veränderte Gensets/ Signalwege abzuleiten. Diese Art der Analyse nennt man *funktionelle Analyse* oder auch *"Gene-Set Enrichment Analysis (GSEA)"*.
3.  Stellt die Ergebnisse grafisch dar.

## R Pakete

Verwendete R Paket:

```{r}
#| collapse: false

#if (!require("BiocManager", quietly = TRUE))
#    install.packages("BiocManager")
#BiocManager::install(version = "3.21")

library(DESeq2)
library(openxlsx)
library(pheatmap)
library(org.Hs.eg.db)
library(ggplot2)
library(FactoMineR)
library(ggrepel)
library(apeglm)
library(ggrepel)
library(viridis)
library(tidyverse)
library(kableExtra)
library(pheatmap)
library(genefilter)
library(EnhancedVolcano)
library(UpSetR)
library(msigdbr)
library(doMC) # falls es hiermit Probleme gibt könnt ihr das Paket auch weglassen
library(foreach) # falls es hiermit Probleme gibt könnt ihr das Paket auch weglassen
library(BiocParallel) # falls es hiermit Probleme gibt könnt ihr das Paket auch weglassen
# optional -> increase speed of analysis due to multicore processing
register(MulticoreParam(4)) # -> diese Zeile löschen, wenn es Probleme mit den Paketen doMC, foreach und/ oder BiocParallel gab
```

Hinweis: Falls diese nicht installiert sind, können sie mit dem Paketmanager von [bioconductor](https://www.bioconductor.org/install/) `BiocManager::install()` oder `install.packages()` installiert werden.

```{r}
#| eval: false
packages <- c(
  "doMC",
  "foreach",
  "BiocParallel",
  "UpSetR",
  "genefilter",
  "DESeq2",
  "openxlsx",
  "pheatmap",
  "org.Hs.eg.db",
  "ggplot2",
  "FactoMineR",
  "ggrepel",
  "apeglm",
  "viridis",
  "tidyverse",
  "kableExtra",
  "pheatmap",
  "EnhancedVolcano",
  "msigdbr",
  "clusterProfiler",
  "AnnotationDbi"
)
BiocManager::install(packages)
```

## Konfiguration

```{r}
#| warning: false
#| 
## general config
mainDir <- "/Users/chris/Library/CloudStorage/GoogleDrive-christoph.kovacs@gmail.com/My Drive/BIDS Bioinformatik & Systembiologie 2025/KW4 Lernaufgabe/MIRACUM_BIDS_Bioinformatik_Systembiologie_RNA_Sequenzierung_Aufgabe"
analysisDir <- file.path(mainDir, "analysis")
degDIR <- file.path(analysisDir, "DEG")
gseaDIR <- file.path(analysisDir, "GSEA")
gageDIR <- file.path(analysisDir, "GSEA", "GAGE")
dir.create(degDIR, recursive = T)
dir.create(gageDIR, recursive = T)
```

**Setzen des Arbeitsverzeichnisses:** Die Funktion `setwd()` setz das Arbeitsverzeichnis und `getwd()` liest das aktuelle Arbeitsverzeichnis aus.

```{r}
setwd(mainDir)
getwd()
```

Bei nicht UNIX basierten Betriebssystemen, z.B. Microsoft Windows, müsst ihr aufpassen, da dort der Backslash als Trenner verwendet wird. Ihr könnte aber, wenn ihr nicht sicher sein, auch die Funktion `file.path(..., fsep = .Platform\$file.sep)` vewenden, z.B.

```{r}
#| warning: false
#| eval: false
file.path(
  "~",
  "Documents",
  "Lehre",
  "BIDS",
  "Bioinformatik und Systembiologie",
  "2024",
  "BIDS_RNA_Seq_2024",
  "MIRACUM_BIDS_Bioinformatik_Systembiologie_RNA_Sequenzierung_Aufgabe_2024"
)
```


## Funktionen

Wir stellen euch ein paar Funktionen zur Verfügung, die euch bei der Konvertierung der verschiedenen Gen-IDs unterstützen können. Alle Konvertierungen sind in der Hauptfunktion `getGeneMat()` zusammengefasst. Diese nimmt als Input die ENSEMBL Gen-IDs und konvertiert diese in die anderen und fasst alles zu einem *"data.frame"* zusammen.

```{r}
ensembl2entrez <- function(ensembl) {
  entrez <- mget(as.character(ensembl), org.Hs.egENSEMBL2EG, ifnotfound = NA)
  entrez <- lapply(entrez, function(i) return(i[1]))
  return(unlist(entrez))
}

entrez2ensembl <- function(entrez) {
  esbl <- mget(as.character(entrez), org.Hs.egENSEMBL, ifnotfound = NA)
  esbl <- lapply(esbl, function(i) return(i[1]))
  return(unlist(esbl))
}

entrez2symbol <- function(entrez) {
  symbol <- mget(as.character(entrez), org.Hs.egSYMBOL, ifnotfound = NA)
  symbol <- unlist(lapply(symbol, function(i) return(i[1])))
  return(symbol)
}

entrez2genename <- function(entrez) {
  symbol <- mget(as.character(entrez), org.Hs.egGENENAME, ifnotfound = NA)
  symbol <- unlist(lapply(symbol, function(i) return(i[1])))
  return(symbol)
}

getGeneMat <- function(ensIDs) {
  geneMat <- data.frame(ENSEMBL=ensIDs)
  geneMat$ENTREZ <- ensembl2entrez(geneMat$ENSEMBL)
  idxNA <- !is.na(geneMat$ENTREZ)
  sym <- entrez2symbol(na.omit(geneMat$ENTREZ))
  genename <- entrez2genename(na.omit(geneMat$ENTREZ))
  geneMat$Symbol <- NA
  geneMat$Symbol[idxNA] <- sym
  geneMat$Genename <- NA
  geneMat$Genename[idxNA] <- genename
  rownames(geneMat) <- geneMat$ENSEMBL
  return(geneMat)
}
```

# Analyse

## Vorbereitung

### Importieren der Rohdaten aus dem Alignment und der Quantifizierung

Das ausrichten der Sequenzierungsschnipsel (Alignment der Reads) wurde mit dem Progamm **STAR** gemacht. STAR bietet außerdem die Möglichkeit auch gleich die Qunatifizierung der Expression vorzunemhen. Dabei wurde der Parameter `--quantMode GeneCount` verwendet. Hierzu wurde eine sogenannte GTF/ GFF Annotationsdatei benutzt, welche die Information beinhaltet, welches Gene zu welchen chromosomalen Koordinaten gehört. Wir betrachten hier ein *un-stranded*-RNA-Sequenzierungs Experiment.

Die einzelnen *.tab* Dateien beinhalten die Counts pro Gene. Dabei gibt die 1. Spalte den ENSEMBL Gen-Identifier an, z.B. *ENSG00000223972* und die 2. Spalte die entsprechenden un-stranded RNA-Seq Counts. Diese beiden Spalten brauchen wir im Folgenden. Die ersten vier Reihen geben ein paar Zusammenfassungsstatistiken über die Count Datei und werden nicht benötigt.

**Erstellt die Count Matrix und die Genreferenztabelle mit allen Genen und den zugehörigen IDs. Stellt die Count-Matrix, die betrachteten Gene und die Annotation der Proben zu den biologischen Bedingungen innerhalb des HTML Dokuments dar.**

```{r}
library(readxl)

getwd()

# Annotation einlesen
annotation <- 
  read_excel("targets.xlsx") %>%
  mutate(group = as.factor(group)) %>%
  column_to_rownames("label") %>%
  mutate(label = rownames(.))
annotation

read_counts <- function(file) {
  read_tsv(file, skip = 4, col_names = c("GeneID", "Count1", "Count2", "Count3"), show_col_types = FALSE) %>%
    select(GeneID, Count1)
}

# Eine Liste mit Count-Daten je Datei
count_list <- map(annotation$file, read_counts)

# Count-Matrix erstellen
count_matrix <- reduce(count_list, full_join, by = "GeneID") %>%
  setNames(c("GeneID", annotation$label)) %>%
  column_to_rownames("GeneID")
count_matrix

# Matrix speichern
#write.table(
#  x = count_matrix,
#  file = file.path(analysisDir, "counts.txt"),
#  sep = "\t",
#  quote = FALSE
#)

# Gene (ENSEMBL-IDs) als Referenz extrahieren
gene_reference <- getGeneMat(rownames(count_matrix))
gene_reference
```

### Vorbereiten des DESeq2 Objektes

Im nächsten Abschnitt wird das DESeq2-Modell erstellt. Damit wird die Grundlage für die spätere Analyse der differentiell exprimierten Gene (DEG) gelegt. Hierbei ist das Handbuch von [DESeq2](https://bioconductor.org/packages/release/bioc/vignettes/DESeq2/inst/doc/DESeq2.html) sehr hilfreich. Wir importieren die Daten auf Grundlage der erstellten Count-Matrix, analog zu [Count-Matrix-Import](https://bioconductor.org/packages/release/bioc/vignettes/DESeq2/inst/doc/DESeq2.html#count-matrix-input). Nach dem Import und dem Erstellen des DESeq2 Objektes müssen wir die Rohdaten einem [Vorfilter](https://bioconductor.org/packages/release/bioc/vignettes/DESeq2/inst/doc/DESeq2.html#pre-filtering) Schritt unterziehen um sehr niedrige Counts zu entfernen. Hierbei is es hilfreich sich zu überlegen, wie viele biologische Replikate wir pro Bedingung haben. Idealerweise entfernt man alle Gene, die im vorliegenden Experiment in Summer über alle Bedingungen weniger als 5-10 Counts haben.

**Wie viele Gene verlieren wir aufgrund von niedriger Expression?**

```{r}
# Erstellen des DESeq2-Objekts
dds <- DESeqDataSetFromMatrix(
  countData = count_matrix,
  colData   = annotation,
  design    = ~ group
)

# Setze untreated group
dds$group <- relevel(dds$group, ref = 'DMSO') 

# Vorfilter
keep <- rowSums(counts(dds) >= 10) >= 2
sum(keep) # keeping 18,198 records
sum(dim(count_matrix)[1]-sum(keep)) # discarding 39,575 records
dds <- dds[keep,] 
```

### Normalisierung und Differentielle Expression

Nachdem wir die schwach exprimierten Gene entfernt haben können wir die Normalisierung der Daten vornehmen. Dazu müssen wir die *"size factors"* und die *"Dispersion"* bestimmen, damit wir den tatsächlichen Signifikanztest (wir wollen den Wald- Test verwenden) anwenden können. Außerdem müssen wir die normalisierten Expressionswerte extrahieren, damit wir damit z.B. eine PCA erstellen können. Dazu verwenden wir die [*regularized logarithm* (rlog) Transformation](https://bioconductor.org/packages/release/bioc/vignettes/DESeq2/inst/doc/DESeq2.html#regularized-log-transformation). Die Werte können dann mit der Funktion `assay()` extrahiert werden.

```{r}
# Schätze size factors
dds <- estimateSizeFactors(dds)
sizeFactors(dds)

# Schätze Dispersion
dds <- estimateDispersions(dds)
plotDispEsts(dds)

# Führe Wald Test durch
dds <- nbinomWaldTest(dds)
plotMA(dds)

# rlog-Transformation, behalte Gruppeninformation
rld <- rlog(dds, blind = FALSE)
rlog_matrix <- assay(rld)
head(rlog_matrix)
```

### QC Plot vor und nach der Normalisierung

Zur besseren Interpretation und dem Verständnis der Normalisierung bietet es sich an die Count-Werte der einzelnen Gene als kombinierten Boxplot für die jeweiligen Bedingungen darzustellen; jeweils vor und nach der Normalisierung. Die Konvertierung der Count-Werte in `log2(count + 1)` hat sich in dieser Hinsicht bewährt.

**Erstellt bitte einen Boxplot mit den log-transformierten Counts vor und einen Boxplot nach der Normalisierung.**

Hinweis: Normalisierte Counts erhaltet ihr nach anwenden der `DESeq()` Funktion und der Extraktion der Werte mit `counts(ddsObject, normalized = TRUE)`. Generell empfielt sich **ggplot2** zum Zeichnen zu verweden, da es vielfälltige Möglichkeiten bietet und dadurch sehr ansehnliche Abbildungen erstellen kann. Um ein für ggplot2 passendes `data.frame` zu erstellen, können Pakete wie z.B. reshape2, dplyr, etc. hilfreich sein.

```{r}
## Roh-Counts extrahieren
raw_counts <- counts(dds)

# Log2 transformieren
log_raw <- log2(raw_counts + 1)

# Daten für ggplot umformen
df_raw <- as.data.frame(log_raw) %>%
  rownames_to_column("gene") %>%
  pivot_longer(-gene, names_to = "sample", values_to = "log2count") %>%
left_join(as.data.frame(colData(dds)) %>%
rownames_to_column("sample"), by = "sample")

# Boxplot erstellen
plot_counts_trans <- df_raw %>%
  ggplot(aes(x = sample, y = log2count, fill = group)) +   # why not group?
  geom_boxplot(outlier.size = 0.3) +
  theme_bw() +
  labs(title = "Counts (trans) pro Bedingung",
       x = "Bedingung", y = "Counts (trans)") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot_counts_trans

## Normalisierte Counts extrahieren
norm_counts <- counts(dds, normalized = TRUE)

# Log2 transformieren
log_norm <- log2(norm_counts + 1)

# Daten für ggplot umformen
df_norm <- as.data.frame(log_norm) %>%
  rownames_to_column("gene") %>%
  pivot_longer(-gene, names_to = "sample", values_to = "log2normCount") %>%
left_join(as.data.frame(colData(dds)) %>%
rownames_to_column("sample"), by = "sample")

# Boxplot erstellen
plot_counts_normtrans <- df_norm %>% 
  ggplot(aes(x = sample, y = log2normCount, fill = group)) +
  geom_boxplot(outlier.size = 0.3) +
  theme_bw() +
  labs(title = "Counts (norm, trans) pro Bedingung",
       x = "Bedingung", y = "Counts (norm, trans)") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot_counts_normtrans
```

## PCA - Principal Component Analysis

Bevor wir mit der tatsächlichen DEG-Analyse fortfahren berechnen wir eine PCA um einen ersten Eindruck von unseren Daten zu bekommen. Dazu verwenden wir die eben erstellten, normalisierten Expressionswerte (rlog-Werte). In der PCA sollen die Bedingungen als *"individuals"* betrachtet und die Gene als *"variables"*. Im Resultat soll jede Probe dargestellt und in seine Haupkomponenten zerlegt werden. Hierzu könnt ihr z.B. das Paket [FactoMineR](http://factominer.free.fr/factomethods/principal-components-analysis.html) verwenden. Bitte erstellt einen sog. *"Individuals Graph"* mit den Proben und den ersten beiden Hauptkomponenten als Achsen. Wenn ihr das FactoMineR Paket verwendet findet ihr diese Infos unter `pca$ind$coord`. Um einen visuell ansprechenderen Abbildung zu erhalten würde ich empfehlen die Abbildung wieder mit dem Paket **ggplot2** zu erstellen. Mit der Funktion `ggsave()` könnte ihr die mit ggplot2 erstellte Abbildung sehr einfach in ein geeignetes Format, z.B. PDF, png, etc. exportieren.

**Erstellt eine PCA und stellt diese als Abbildung im HTML Dokument dar.**

```{r}
## Scree Plot
mat <- assay(rld) 

# Select top 500 variable genes
top500 <- head(order(rowVars(mat), decreasing = TRUE), 500)
pca_res <- prcomp(t(mat[top500, ]), center = TRUE, scale. = FALSE) # make sure scaling does not distort low-expressed changes
# Calculate proportion of variance
pca_var <- pca_res$sdev^2
pca_var_exp <- pca_var / sum(pca_var)

df <- data.frame(
  PC = 1:20,
  Cumulative = cumsum(pca_var_exp[1:20])
)
# Keep only PCs 1 to 6
df <- df[df$PC <= 6, ]
plot_scree <- ggplot(df, aes(x = PC, y = Cumulative)) +
  geom_line() +
  geom_point() +
  geom_hline(yintercept = 0.9, linetype = "dashed", color = "red") +
  scale_x_continuous(breaks = 1:8) +  # No `limits` needed now
  labs(
    title = "Kumulativer Scree-Plot",
    x = "Anzahl Komponenten",
    y = "Kumulative erklärte Varianz"
  ) +
  theme_minimal()

# Show it
plot_scree

### PCA: Principal Component Analysis (linear relationship analysis)
## 2D
pca <- plotPCA(rld, intgroup = "group", returnData = TRUE)
# Variance explained
percentVar <- round(100 * attr(pca, "percentVar"))

# Plot
plot_pca_2d <- ggplot(pca, aes(PC1, PC2, color = group, label = name)) +
  geom_point(size = 3) +
  geom_text(vjust = -1.2, size = 3) +
  xlab(paste0("PC1: ", percentVar[1], "% variance")) +
  ylab(paste0("PC2: ", percentVar[2], "% variance")) +
  coord_fixed() +
  theme_minimal()
plot_pca_2d
# Interpretation
# ==============
# PCA erklärt 87% der Gesamtvarianz in 2 Dimensionen
# DMSO bildet einen Cluster, die Samples kann als (linear) homogen angenommen werden
# Sorafenib bildet einen Cluster, die Samples können daher als (linear) homogen angenommen werden
# Trametinib bildet zwei Cluster, die Samples sind daher nicht (linear) homogen

## 3D
library(plotly)

# Run PCA (no scaling, like plotPCA)
pca <- prcomp(t(mat[top500, ]), center = TRUE, scale. = FALSE)

# Get variance explained
percentVar <- round(100 * (pca$sdev^2 / sum(pca$sdev^2)), 1)

# Sample metadata (assuming 'group' is the treatment column)
meta <- as.data.frame(colData(dds))

# PCA scores
pca_df <- as.data.frame(pca$x)
pca_df$group <- meta$group
pca_df$sample <- rownames(meta)

# Plot
plot_pca_3d <- plot_ly(
  pca_df, x = ~PC1, y = ~PC2, z = ~PC3,
  color = ~group, colors = "Set1",
  text = ~paste("Sample:", sample),
  type = "scatter3d", mode = "markers"
) %>%
  layout(
    scene = list(
      xaxis = list(title = paste0("PC1 (", percentVar[1], "%)")),
      yaxis = list(title = paste0("PC2 (", percentVar[2], "%)")),
      zaxis = list(title = paste0("PC3 (", percentVar[3], "%)"))
    ),
    title = "3D PCA of RNA-Seq Samples"
  )
plot_pca_3d
```

**MDS**

```{r}
### MDS: Multi-dimensional Scaling (linear relationship analysis)
# Compute distance matrix from rlog-transformed data
d <- dist(t(assay(rld)))  # transpose because samples are columns
# Perform classical MDS (multi-dimensional scaling)
mds <- cmdscale(d, k = 2)  # k = number of dimensions (2D)
# Create a data frame with sample information
mds_df <- as.data.frame(mds)
mds_df$group <- colData(rld)$group  # adjust 'group' to your grouping column
# Plot with ggplot2
plot_mds <- ggplot(mds_df, aes(x = V1, y = V2, color = group)) +
  geom_point(size = 3) +
  labs(x = "MDS1", y = "MDS2") +
  theme_minimal()
plot_mds
# Interpretation
# ==============
# MDS zeigt ähnliches Bild wie PCA
# Sorafenib bildet einen Cluster, die Samples können daher als (linear) homogen angenommen werden
# DMSO und Trametinib bilden jeweils zwei Cluster, die Samples scheinen daher nicht-lineare Beziehungen zu haben, die von der MDS nicht erfasst werden
```

**t-SNA**

```{r}
#| echo: false
#| messages: false
### t-SNA: t-distributed stochastic neighbor embedding for non-linear relationship analysis
library(Rtsne)
# Extract assay data (genes x samples) and transpose to samples x genes
mat <- t(assay(rld))

# Optionally: reduce to top variable genes to speed up and denoise
top_var_genes <- head(order(apply(mat, 2, var), decreasing = TRUE), 500)
mat_top <- mat[, top_var_genes]

# Run t-SNE (you can adjust perplexity; try 5–30 depending on sample size)
set.seed(42)  # for reproducibility
tsne_out <- Rtsne(mat_top, dims = 2, perplexity = 1, verbose = TRUE)

# Combine with metadata
tsne_df <- data.frame(
  TSNE1 = tsne_out$Y[,1],
  TSNE2 = tsne_out$Y[,2],
  group = colData(rld)$group,  # adjust if your metadata column is named differently
  sample = colnames(rld)  # Add sample names as a column
)

# Plot with ggplot2
plot_tsna <- ggplot(tsne_df, aes(x = TSNE1, y = TSNE2, color = group)) +
  geom_point(size = 3) +
  geom_text_repel(aes(label = sample), size = 3, max.overlaps = Inf) +
  labs(title = "t-SNE of RNA-seq samples", x = "t-SNE 1", y = "t-SNE 2") +
  theme_minimal()
plot_tsna
# Interpretation
# ==============
# Ganz deutliche Cluster zu erkennen; DMSO und Tramatinib bilden jeweils einen Cluster, zusammen einen größeren. Daher kann davon ausgegangen, dass Trametinib keinen über die Baseline hinausgehenden qualitativen Unterschied aufweist.
# Sorafenib bildet einen Cluster deutlich abseits der Kontrollgruppe und von Trametinib, das kann als Indikator für einen qualitativen Unterschied gewertet werden
```

*** UMAP ***
```{r}
if (!require("umap", quietly = TRUE))
  install.packages("umap")

library(umap)

# Prepare expression matrix: genes in columns, samples in rows
mat <- t(assay(rld))  # transpose to samples × genes

# (Optional) Reduce to top 500 most variable genes
top_var_genes <- head(order(apply(mat, 2, var), decreasing = TRUE), 500)
mat_top <- mat[, top_var_genes]

# Run UMAP
set.seed(42)  # for reproducibility
umap_result <- umap(mat_top, n_neighbors = 5)

# Prepare data frame for ggplot2
umap_df <- as.data.frame(umap_result$layout)
umap_df$group <- colData(rld)$group  # replace with correct metadata field
umap_df$sample <- rownames(umap_df)

# Plot
plot_umap <- ggplot(umap_df, aes(x = V1, y = V2, color = group, label = sample)) +
  geom_point(size = 3) +
  geom_text(vjust = -1, size = 3) +
  labs(title = "UMAP of RNA-seq samples", x = "UMAP1", y = "UMAP2") +
  theme_minimal()
plot_umap
```

## Differentielle Expressions Analyse

Um die DEG-Analyse durchzuführen müssen wir noch definieren an welchen tatsächlichen Vergleichen wir interessiert sind. Dazu können wir uns eine sog. [Kontrast-Matrix](https://bioconductor.org/packages/release/bioc/vignettes/DESeq2/inst/doc/DESeq2.html#contrasts) erstellen. Folgende Vergleiche sind für uns interessant:

-   Sorafenib vs DMSO und
-   Trametinib vs DMSO,

da wir verstehen wollen, welchen Einfluss die beiden Inhibitoren auf unsere Zellen haben. Für beide Vergleiche bestimmen wir die DEGs und exportieren diese bis zu einem korrigierten (FDR) p-Wert \< 0.05 in eine Tabelle. Hierzu verwenden wir die Funktion `lfcShrink()`. Damit die Tabellen für unsere Kollaborationspartner besser verständlich werden ist es essentiell, dass die Gene mit allen IDs, hautpsächlich aber dem Symbol, in den Ergebnissen enthalten sind.

**Berechnet die DEGs für die beiden Vergleiche Sorafenib vs DMSO und Trametinib vs DMSO. Erstellt Tabellen, die die signifikanten Gene bis zu einem FDR-korrigierten p-Wert \< 0.05 beinhalten. Achtet hier darauf auch das Symbol in der Ergebnistabelle zu haben. Ansonsten fällt die Zuordnung der Gene schwer. Zeigt diese im HTML Dokument. Exportiert die Ergebnisse der DEG-Analyse zusätzlich als Excel-Tabellen.**

Bei der Darstellung der DEG-Ergebnisse innerhalb des HTML Dokuments müsst ihr nicht alle Spalten darstellen. Dies wird schnell sehr unübersichtlich. Ich würde sagen, dass ihr maximal drei Angaben braucht: Symbol, log2FoldChange und den korrigierten p-Wert. Bei der Darstellung innerhalb des HTMLs kann die Funktion `kable()` hilfreich sein.

**Wie viele Gene sind pro Vergleich signifikant reguliert? Wie verteilt sich die Anzahl auf hoch- bzw. runter-regulierte Gene? Stellt diese Ergebnisse anschaulich dar.**

Hinweis: Hierzu könnt ihr den `log2FoldChange` aus der DEG-Analyse verwenden.

```{r}
#| echo: false
## ref:
## https://www.youtube.com/watch?v=0b24mpzM_5M (theory)
## https://www.youtube.com/watch?v=OzNzO8qwwp0 (R)

if (!require("ashr", quietly = TRUE))
    install.packages("ashr")

library(ashr)

dds <- DESeq(dds)

# Sorafenib vs DMSO
res_sora <- lfcShrink(dds, contrast = c("group", "Sorafenib", "DMSO"), type = "ashr")

# Trametinib vs DMSO
res_tram <- lfcShrink(dds, contrast = c("group", "Trametinib", "DMSO"), type = "ashr")

# Hilfsfunktion für Filter & Format
filter_deg <- function(res) {
  as.data.frame(res) |>
    rownames_to_column("ENSEMBL") |>
    left_join(gene_reference[, c("ENSEMBL", "Symbol")], by = "ENSEMBL") |>
    filter(padj < 0.05 & !is.na(Symbol)) |>
    select(Symbol, log2FoldChange, padj) |>
    arrange(desc(abs(log2FoldChange)))  # nach Effektgröße sortieren
}

deg_sora <- filter_deg(res_sora)
deg_tram <- filter_deg(res_tram)

## compare up and down-regulated genes
count_regulation <- function(df) {
  df |> 
    mutate(Regulation = case_when(
      log2FoldChange > 0 ~ "Upregulated",
      log2FoldChange < 0 ~ "Downregulated"
    )) |> 
    count(Regulation)
}

sora_counts <- count_regulation(deg_sora)
tram_counts <- count_regulation(deg_tram)
 
# Visualize
sora_counts$Comparison <- "Sorafenib vs DMSO"
tram_counts$Comparison <- "Trametinib vs DMSO"
all_counts <- bind_rows(sora_counts, tram_counts)

plot_deg <- ggplot(all_counts, aes(x = Comparison, y = n, fill = Regulation)) +
  geom_bar(stat = "identity", position = "stack") +
  labs(title = "Differenziell regulierte Gene", y = "Anzahl Gene") +
  coord_flip() +
  theme_minimal()
plot_deg
 
```

### Identifizierte DEGs als Tabellen
```{r}

tab_deg_sora <- kable(head(deg_sora, 10), caption = "Top DEGs: Sorafenib vs DMSO")
tab_deg_sora
tab_deg_tram <- kable(head(deg_tram, 10), caption = "Top DEGs: Trametinib vs DMSO")
tab_deg_tram
```


#### Sorafenib vs. DMSO

```{r}
#| eval: false
#| tbl-subcap:
#|   - "Up-Regulated"
#|   - "Down-Regulated"
#| layout-ncol: 2
#| tbl-cap: "DEGs Sorafenib vs. DMSO"

#kable(df[, c("Symbol", "log2FoldChange", "padj")], row.names = FALSE, "html", #col.names = c("Symbol", "log2FC", "adj. p-value"))  %>%
#  kable_styling() %>%
#  scroll_box(width = "100%", height = "800px")
```

#### Trametinib vs. DMSO

```{r}

```

### Visuelle Darstellung: Volcano Plot

Zusätzlich zur tabellarischen Darstellung der DEG-Ergebnisse kann man diese auch als sog. *"Volcano Plots"* darstellen. Dabei werden alle Gene als Punkte mit ihrem Signifikanzwert (y-Achse) und dem log2FoldChange (x-Achse) dargestellt. Die signifikanten Gene werden dabei farblich hervorgehoben. Mit dem R Paket [EnhancedVolcano](http://www.bioconductor.org/packages/release/bioc/vignettes/EnhancedVolcano/inst/doc/EnhancedVolcano.html) haben wir gute Erfahrungen gemacht.

**Erstellt jeweils einen Volcano Plot für die beiden Vergleiche.**

```{r}
if (!requireNamespace("EnhancedVolcano", quietly = TRUE)) {
  BiocManager::install("EnhancedVolcano")
}
library(EnhancedVolcano)

```

#### Volcano Plot: Sorafenib vs. DMSO

```{r}
plot_volcano_sora <- EnhancedVolcano(res_sora,
    lab = gene_reference$Symbol[match(rownames(res_sora), gene_reference$ENSEMBL)],
    x = 'log2FoldChange',
    y = 'padj',
    pCutoff = 0.05,
    FCcutoff = 1,
    pointSize = 2.0,
    labSize = 3.0,
    title = 'Sorafenib vs DMSO',
    subtitle = 'Differentiell exprimierte Gene',
    caption = 'log2FC > 1, FDR < 0.05',
    legendLabels = c('NS', 'Log2FC', 'FDR', 'FDR & Log2FC'),
    legendPosition = 'right')
plot_volcano_sora
```

#### Volcano Plot: Trametinib vs DMSO

```{r}
plot_volcano_tram <- EnhancedVolcano(res_tram,
    lab = gene_reference$Symbol[match(rownames(res_tram), gene_reference$ENSEMBL)],
    x = 'log2FoldChange',
    y = 'padj',
    pCutoff = 0.05,
    FCcutoff = 1,
    pointSize = 2.0,
    labSize = 3.0,
    title = 'Trametinib vs DMSO',
    subtitle = 'Differentiell exprimierte Gene',
    caption = 'log2FC > 1, FDR < 0.05',
    legendLabels = c('NS', 'Log2FC', 'FDR', 'FDR & Log2FC'),
    legendPosition = 'right')
plot_volcano_tram
```

## Vergleich der beiden Medikamente

Um die Unterschiede und Gemeinsamkeiten zwischen den beiden Medikamenten bzw. deren jeweiligen Vergleiche zu DMSO zu finden, können wir das R Paket [UpSetR](https://github.com/hms-dbmi/UpSetR) verwenden. Da wir beide Medikament zu DMSO verglichen haben, ist das Vorgehen sinnvoll und wir können direkt Unterschiede und Gemeinsamkeiten identifizieren. Wir nehmen den Vergleich auf Ebene der signifikant regulierten Gene, getrennt nach hoch- bzw. runter-Regulation, vor. Dazu legen wir uns zwei Listen an, analog zu [Basic Usage](https://cran.r-project.org/web/packages/UpSetR/vignettes/basic.usage.html). Eine für die hoch-regulierten und eine für die runter-regulierten Gene. Danach kann der Befehl `upset(fromList(list))` verwendet werden. Um an die einzelnen Gene in den verschiedenen *"Sets"* zu kommen, stellen wir euch eine Funktion `upSetSets(list)` zur Verfügung. Als Input Parameter übergebt ihr dieser Funktion die Liste, die auch für `upset()` verwendet wird.

**Führt den Vergleich der beiden Medikamente durch.**

```{r}
if (!requireNamespace("UpSetR", quietly = TRUE)) {
  install.packages("UpSetR")
}
library(UpSetR)

# function to obtain genes per set
upSetSets <- function(sets){
  list_names <- names(sets)
  attach(sets,warn.conflicts = F)
  res <- lapply(1:length(list_names),function(y){
    combinations <- combn(list_names,y)
    res<-as.list(apply(combinations,2,function(x){
      if(length(x)==1){
        p <- setdiff(get(x),unlist(sapply(setdiff(list_names,x),get)))
      }

      else if(length(x) < length(list_names)){
        p <- setdiff(Reduce(intersect,lapply(x,get)),
        Reduce(union,sapply(setdiff(list_names,x),get)))
      }

      else p <- Reduce(intersect,lapply(x,get))

      if(!identical(p,character(0))) p
      else NA
    }))

    if(y==length(list_names)) {
      res[[1]] <- unlist(res);
      res<-res[1]
    }
    names(res) <- apply(combinations,2,paste,collapse="-")
    res
  })
  result <- lapply(res, function(x) x[!is.na(x)])
  result <- unlist(result, recursive = F)
  result <- lapply(result,function(x) data.frame(ID=x))
  return(result)
  detach(sets)
}
```

### Gemeinsamkeiten

#### Durch beide Medikamente hoch-regulierte Gene

```{r}
up_sora <- deg_sora |> filter(log2FoldChange > 0) |> pull(Symbol)
up_tram <- deg_tram |> filter(log2FoldChange > 0) |> pull(Symbol)

up_list <- list(
  Sorafenib = up_sora,
  Trametinib = up_tram
)
```

#### Durch beide Medikamente runter-regulierte Gene

```{r}
down_sora <- deg_sora |> filter(log2FoldChange < 0) |> pull(Symbol)
down_tram <- deg_tram |> filter(log2FoldChange < 0) |> pull(Symbol)

down_list <- list(
  Sorafenib = down_sora,
  Trametinib = down_tram
)
```

```{r}
## Plots
# Hochregulierte Gene
plot_upset_up <- upset(fromList(up_list), 
      order.by = "freq",
      mainbar.y.label = "Gemeinsame hochregulierte Gene",
      sets.x.label = "Gene pro Medikament",
      text.scale = c(2, 2, 2, 2, 2, 2)
    )
plot_upset_up

# Runterregulierte Gene
plot_upset_down <- upset(fromList(down_list), 
      order.by = "freq",
      mainbar.y.label = "Gemeinsame runterregulierte Gene",
      sets.x.label = "Gene pro Medikament",
      text.scale = c(2, 2, 2, 2, 2, 2)
    )
plot_upset_down

tab_upset_sora_up <- head(upSetSets(up_list)$Sorafenib)  # für hochregulierte Gene
tab_upset_tram_up <- head(upSetSets(up_list)$Trametinib)  # für hochregulierte Gene

tab_upset_sora_down <- head(upSetSets(down_list)$Sorafenib)  # für runterregulierte Gene
tab_upset_tram_down <- head(upSetSets(down_list)$Trametinib)  # für runterregulierte Gene


# Optional: Zugriff auf die einzelnen Sets
up_sets <- upSetSets(up_list)
down_sets <- upSetSets(down_list)

# Durch beide Medikamente hoch-regulierte Gene
up_sets[["Sorafenib-Trametinib"]]

# Durch beide Medikamente runter-regulierte Gene
down_sets[["Sorafenib-Trametinib"]]
```


Jetzt kennen wir die Gene, die entweder durch beiden Medikamente oder auch nur in dem einen oder dem anderen verändert sind. Aber was machen wir jetzt damit? Wir können uns z.B. der Ressource *"Molecular Signatures Database"* (MSigDB) bedienen.

"MSigDB is a resource of tens of thousands of annotated gene sets for use with GSEA (gene-set enrichment analysis) software".

Die "gene-set enrichment" Analyse ist eine Berechnungsmethode, mit der festgestellt wird, ob ein a priori definierter Satz von Genen statistisch signifikante, übereinstimmende Unterschiede zwischen zwei biologischen Zuständen (z.B. Phänotypen) zeigt. Anders ausgedrückt können wir damit bestimmen, ob die Gene innerhlab der oben bestimmten *"Sets"* einen signifikante "Funktion" haben und daraus schlußfolgern, dass diese "Funktion" in unserem Experiment verändert ist. Für die Analyse verwenden wir den Exakten Test nach Fisher oder auch hypergeometrischer Test. Die Funktion `hyperG()` für den Test stellen wir euch zur Verfügung.

```{r}
hyperG <- function(geneSets,DEgenes,universe, cutoff=0.1, mincount=2, parallel=T, adj.P.Val = F,
                   set.size = NULL){
  #' hyperG
  #' 
  #' @description Calculates Fisher's Exact test with the specified genes and the supplied gene-sets.
  #'
  #' @param geneSets list. Gene-Set the calculation is based on, e.g. go.bp
  #' @param DEgenes character vector. Gene IDs used for testing. Same identifiers as used for the gene-sets, e.g. ENTREZ IDs.
  #' @param universe character vector. Universe gene IDs.
  #' @param cutoff numeric. Cutoff used to identify sig. pathways. Default: 0.1.
  #' @param mincount numeric. Consider only pathways which contain at least mincount genes. Default: 2
  #' @param parallel boolean. Use parallel calculation. Default: TRUE
  #' @param adj.P.Val boolean. Use adjusted p-value for significance filtering. Is always calculated.
  #' @param set.size vector. Min and max size of allowed gene-sets. Default min:10 genes and max:500 genes.
  #'  
  #' @return the significant regualted pathways.
  #' @export
  #' @importFrom foreach, doMC
  
  require(foreach)
  require(doMC)
  if(parallel){
    registerDoMC(cores=detectCores())
    cores=detectCores()
  }else{
    cores=1
  }
  if(!is.null(set.size)){
    print('Set Size Limits')
    idx <- lapply(geneSets,function(x){length(x) <= set.size[2] & length(x) >= set.size[1]})
    geneSets <- geneSets[unlist(idx)]
  }
  l <- length(setdiff(universe,DEgenes))
  DElen <- length(DEgenes)
  results <- mclapply(1:length(geneSets), function(i){
    results <- matrix(data=NA,ncol=7,nrow = 1)
    colnames(results) <- c('Term','Count','Size','p-value','adj.P.Val','odds ratio','GeneIDs')
    geneSet <- intersect(universe, geneSets[[i]])
  e <- intersect(DEgenes,geneSet)
    a <- length(e)
    b <- DElen - a
    c <- length(geneSet) - a
    d <- l - c
    contigency.matrix <- cbind(c(a,b),c(c,d))
    res <- fisher.test(contigency.matrix,alternative = 'greater')
    results[1,'Term'] <- names(geneSets)[i]
    results[1,'Count'] <- a
    results[1,'Size'] <- length(geneSets[[i]])
    results[1,'p-value'] <- res$p.value
    results[1,'odds ratio'] <- res$estimate[[1]]
    # find genes annotated in the consensus term
    if(a > 0){
      genes <- intersect(DEgenes,geneSet)
      eid <- genes
      eid <- eid[order(eid)]
      results[1,'GeneIDs'] <- paste(eid,collapse="|")
    }
    return(results)
  }, mc.cores=cores)
    
  results <- as.data.frame(do.call(rbind, results))
  for(i in c(2, 3, 4, 5)){
    results[, i] <- as.numeric(as.character(results[, i]))
  }
  
  if(nrow(results) != 1){
    results <- results[order(results[,'p-value'],decreasing = FALSE),]
  results[,'adj.P.Val'] <- p.adjust(results[,'p-value'], 'BH')
  if(adj.P.Val){
    results <- as.data.frame(subset(results,results[,'adj.P.Val']<=cutoff))
  }else{
    results <- as.data.frame(subset(results,results[,'p-value']<=cutoff))
  }
    results <- as.data.frame(subset(results,results[,'Count']>=mincount))
  }else results <- as.data.frame(results)
  
  return(results)
}
```

Außer der Funktion benötigen wir noch die entsprechenden Gensets/ Signalwegen, die uns interessieren. Diese können wir direkt über ein R Paket von MSigDB (msigdbr) beziehen. Auch hierzu stellen wir euch eine Funktion zur Verfügung, die das abrufen und erstellen der passenden Gensets vereinfacht. Wir laden uns damit die "Hallmark Gene Sets" direkt mit den *Gen-Symbolen* der Gene als IDs. Das geladene Genset ist eine Liste, die direkt als Input für die Funktion `hyperG()` verwendet werden können.

```{r}
get_geneset_ag <- function(
  species = "Homo sapiens",
  category = NULL,
  subcollection = NULL,
  format = "entrez"
) {
  require(msigdbr)
  db_df <- msigdbr(species = species ,category = category, subcollection = subcollection)
  if(format == "entrez"){
    m_list = db_df %>% split(x = as.character(.$entrez_gene), f = .$gs_name)
    for(idx in 1:length(m_list)){
      m_list[[idx]] <- unique(m_list[[idx]] )
    }
    return(m_list)
  }
  if(format == "symbol"){
    m_list = db_df %>% split(x = .$gene_symbol, f = .$gs_name)
    for(idx in 1:length(m_list)){
      m_list[[idx]] <- unique(m_list[[idx]])
    }
    return(m_list)
  }
  if(format == "df"){
    return(db_df)
  }
}
```

```{r}
# load Hallmark gene set
hallmark <- get_geneset_ag(species = "Homo sapiens", category = "H", format = "symbol")
```

Um die Funktion `hyperG()` ausführen zu können brauchen wir jetzt noch ein sog. *"universe"*. Dieses beinhaltet alle Gene, die in unserem Experiment enthalten sind. Das *"universe"* ist ein Vektor, der alle Gene als Symbole beinhaltet. Es sollten keine NAs und/ oder Duplikate enthalten sein.

**Erstellt das "universe" und führt die funktionelle Analye/ Gene-set Enrichment Analyse mit der hyperG Funktion und den Hallmark Signalwegen durch**

```{r}
# Extrahiere die ENSEMBL-IDs aus dem dds-Objekt
ensembl_ids <- rownames(dds)

# Verknüpfe mit gene_reference, um die Symbolnamen zu erhalten
universe_df <- tibble(ENSEMBL = ensembl_ids) |>
  left_join(gene_reference[, c("ENSEMBL", "Symbol")], by = "ENSEMBL")

#  Erstelle das Universe
universe <- universe_df$Symbol |> unique() |> na.omit()
```

```{r GSEA Universe und Hallmark}
# Hallmark Gensets sind bereits geladen als 'hallmark' (siehe oben)

# GSEA für durch beide Medikamente hoch-regulierte Gene
gsea_up <- hyperG(
  geneSets = hallmark,
  DEgenes = up_sets[["Sorafenib-Trametinib"]]$ID,
  universe = universe,
  cutoff = 0.1,
  mincount = 2,
  parallel = TRUE,
  set.size = c(10,500)
)

# GSEA für durch beide Medikamente runter-regulierte Gene
gsea_down <- hyperG(
  geneSets = hallmark,
  DEgenes = down_sets[["Sorafenib-Trametinib"]]$ID,
  universe = universe,
  cutoff = 0.1,
  mincount = 2,
  parallel = TRUE,
  set.size = c(10,500)
)
```

### Gemeinsamkeiten: Durch beide Medikamente hoch-regulierte Hallmark Gensets

```{r}
gsea_up
gsea_up$Term <- gsub("HALLMARK_", "", gsea_up$Term)
```

```{r gsea_up enrichment plot}
gsea_up_plot <- gsea_up[order(gsea_up$adj.P.Val), ][1:10, ]
gsea_up_plot$Term <- factor(gsea_up_plot$Term, levels = rev(gsea_up_plot$Term))

gsea_plot_up <- ggplot(gsea_up_plot, aes(x = Term, y = -log10(adj.P.Val), fill = Count)) +
  geom_bar(stat = "identity") +
  coord_flip() +
  labs(
    title = "Top 10 Enriched Hallmark Gene Sets (Up-regulated)",
    x = "Gene Set",
    y = "-log10(adj. p-value)",
    fill = "Gene Count"
  ) +
  theme_minimal()
gsea_plot_up
```

```{r Dotplot gsea_up, fig.width=8, fig.height=5}
# Calculate ratio and order by ratio descending, select top 25
gsea_up_plot <- gsea_up
gsea_up_plot$Ratio <- gsea_up_plot$Count / gsea_up_plot$Size
gsea_up_plot <- gsea_up_plot[order(gsea_up_plot$Ratio, decreasing = TRUE), ][1:min(25, nrow(gsea_up_plot)), ]
gsea_up_plot$Term <- factor(gsea_up_plot$Term, levels = rev(gsea_up_plot$Term))

gsea_dotplot_up <- ggplot(gsea_up_plot, aes(x = Ratio, y = Term)) +
  geom_point(aes(size = Count, color = -log10(adj.P.Val))) +
  scale_color_viridis_c(option = "plasma", direction = -1, name = "-log10(adj. p-value)") +
  labs(
    title = "Dotplot: Top Enriched Hallmark Gene Sets (Up-regulated, Ordered by Ratio)",
    x = "Gene Ratio (Count / Size)",
    y = "Gene Set",
    size = "Gene Count"
  ) +
  theme_minimal()
gsea_dotplot_up
```

### Gemeinsamkeiten: Durch beide Medikamente runter-regulierte Hallmark Gensets

```{r}
gsea_down
gsea_down$Term <- gsub("HALLMARK_", "", gsea_down$Term)
```

```{r gsea_down enrichment plot}
gsea_down_plot <- gsea_down[order(gsea_down$adj.P.Val), ][1:10, ]
gsea_down_plot$Term <- factor(gsea_down_plot$Term, levels = rev(gsea_down_plot$Term))

gsea_plot_down <- ggplot(gsea_down_plot, aes(x = Term, y = -log10(adj.P.Val), fill = Count)) +
  geom_bar(stat = "identity") +
  coord_flip() +
  labs(
    title = "Top 10 Enriched Hallmark Gene Sets (Down-regulated)",
    x = "Gene Set",
    y = "-log10(adj. p-value)",
    fill = "Gene Count"
  ) +
  theme_minimal()
gsea_plot_down
```

```{r Dotplot gsea_down, fig.width=8, fig.height=5}
# Calculate ratio and order by ratio descending, select top 25
gsea_down_plot <- gsea_down
gsea_down_plot$Ratio <- gsea_down_plot$Count / gsea_down_plot$Size
gsea_down_plot <- gsea_down_plot[order(gsea_down_plot$Ratio, decreasing = TRUE), ][1:min(25, nrow(gsea_down_plot)), ]
gsea_down_plot$Term <- factor(gsea_down_plot$Term, levels = rev(gsea_down_plot$Term))

gsea_dotplot_down <- ggplot(gsea_down_plot, aes(x = Ratio, y = Term)) +
  geom_point(aes(size = Count, color = -log10(adj.P.Val))) +
  scale_color_viridis_c(option = "plasma", direction = -1, name = "-log10(adj. p-value)") +
  labs(
    title = "Dotplot: Top Enriched KEGG Pathways (Ordered by Ratio)",
    x = "Gene Ratio (Count / Size)",
    y = "KEGG Pathway",
    size = "Gene Count"
  ) +
  theme_minimal()
gsea_dotplot_down
```

#### Gene Ontology Analysis

```{r GO}
# DEG analysis with lfcShrink for more accurate log2FC
sora_res <- lfcShrink(dds, contrast = c("group", "Sorafenib", "DMSO"), type = "normal")
tram_res <- lfcShrink(dds, contrast = c("group", "Trametinib", "DMSO"), type = "normal")

# Annotate with gene symbols
geneMat <- getGeneMat(rownames(sora_res))
sora_annot <- cbind(geneMat, as.data.frame(sora_res))
tram_annot <- cbind(geneMat, as.data.frame(tram_res))

# Filter for significant genes (FDR < 0.05)
sora_sig <- sora_annot %>% filter(!is.na(padj) & padj < 0.05)
tram_sig <- tram_annot %>% filter(!is.na(padj) & padj < 0.05)

# Split into up/down-regulated
sora_up   <- sora_sig %>% filter(log2FoldChange > 0)
sora_down <- sora_sig %>% filter(log2FoldChange < 0)
tram_up   <- tram_sig %>% filter(log2FoldChange > 0)
tram_down <- tram_sig %>% filter(log2FoldChange < 0)

library(clusterProfiler)
library(AnnotationDbi)

sora_up_genes_to_test <- rownames(sora_up)
tram_up_genes_to_test <- rownames(tram_up)
sora_down_genes_to_test <- rownames(sora_down)
tram_down_genes_to_test <- rownames(tram_down)
sora_up_go_results <- enrichGO(
  gene = sora_up_genes_to_test,
  OrgDb = org.Hs.eg.db,
  keyType = "ENSEMBL",
  ont = "BP", # Biological Process
)
tram_up_go_results <- enrichGO(
  gene = tram_up_genes_to_test,
  OrgDb = org.Hs.eg.db,
  keyType = "ENSEMBL",
  ont = "BP", # Biological Process
)
sora_down_go_results <- enrichGO(
  gene = sora_down_genes_to_test,
  OrgDb = org.Hs.eg.db,
  keyType = "ENSEMBL",
  ont = "BP", # Biological Process
)
tram_down_go_results <- enrichGO(
  gene = tram_down_genes_to_test,
  OrgDb = org.Hs.eg.db,
  keyType = "ENSEMBL",
  ont = "BP", # Biological Process
)
# Order GO enrichment results by Count descending
sora_up_go_results@result <- sora_up_go_results@result[order(-sora_up_go_results@result$Count), ]
tram_up_go_results@result <- tram_up_go_results@result[order(-tram_up_go_results@result$Count), ]
sora_down_go_results@result <- sora_down_go_results@result[order(-sora_down_go_results@result$Count), ]
tram_down_go_results@result <- tram_down_go_results@result[order(-tram_down_go_results@result$Count), ]
```

Barplots der GO Ergebnisse für Sorafenib Up-Regulierte Gene:

```{r GO Plot Sora Up, fig.width=12, fig.height=10}
plot_go_sora_up <- barplot(
  sora_up_go_results,
  showCategory = 10,
  font.size = 12,
  title = "GO Enrichment Sorafenib Hochregulierte Gene"
) +
  theme(
    axis.text.y = element_text(size = 12),
    axis.text.x = element_text(size = 11),
    plot.title = element_text(size = 14, face = "bold"),
    plot.margin = margin(t = 5, r = 5, b = 5, l = 30, unit = "mm")  # adds left space for labels
  )
plot_go_sora_up
```

Barplots der GO Ergebnisse für Sorafenib Down-Regulierte Gene:

```{r GO Plot Sora Down, fig.width=12, fig.height=10}
plot_go_sora_down <- barplot(
  sora_down_go_results,
  showCategory = 10,
  font.size = 12,
  title = "GO Enrichment Sorafenib Herunteregulierte Gene"
) +
  theme(
    axis.text.y = element_text(size = 12),
    axis.text.x = element_text(size = 11),
    plot.title = element_text(size = 14, face = "bold"),
    plot.margin = margin(t = 5, r = 5, b = 5, l = 30, unit = "mm")  # adds left space for labels
  )
plot_go_sora_down
```

Barplots der GO Ergebnisse für Trametinib Up-Regulierte Gene:

```{r Go Plot Tram Up, fig.width=12, fig.height=10}
plot_go_tram_up <- barplot(
  tram_up_go_results,
  showCategory = 10,
  font.size = 12,
  title = "GO Enrichment Trametinib Hochregulierte Gene"
) +
  theme(
    axis.text.y = element_text(size = 12),
    axis.text.x = element_text(size = 11),
    plot.title = element_text(size = 14, face = "bold"),
    plot.margin = margin(t = 5, r = 5, b = 5, l = 30, unit = "mm")  # adds left space for labels
  )
plot_go_tram_up
```

Barplots der GO Ergebnisse für Trametinib Down-Regulierte Gene:

```{r Go Plot Tram Down, fig.width=12, fig.height=10}
plot_go_tram_down <- barplot(
  tram_down_go_results,
  showCategory = 10,
  font.size = 12,
  title = "GO Enrichment Trametinib Herunteregulierte Gene"
) +
  theme(
    axis.text.y = element_text(size = 12),
    axis.text.x = element_text(size = 11),
    plot.title = element_text(size = 14, face = "bold"),
    plot.margin = margin(t = 5, r = 5, b = 5, l = 30, unit = "mm")  # adds left space for labels
  )
plot_go_tram_down
```

# Anhang

```{r}
#| cache: false

exclude <- c("count_list", "df_norm", "df_raw", "sora_annot", "rld")
save(
  list = setdiff(ls(), exclude),
  file = "session.RData"
)
```

```{r}
sessionInfo()
```
