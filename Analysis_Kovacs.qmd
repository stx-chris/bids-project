---
title: "Analysis - Kovacs"
author: "Christoph Kovacs"
format:
  html:
    toc: true
    number-sections: true
    df-print: paged
    code-fold: false
    embed-resources: true
execute:
  cache: true
  echo: true
  warning: false
  error: false
#editor: visual
---

## Week 4 - Preparation

```{r}
#| eval: false
#| echo: false
packages <- c(
  "doMC",
  "foreach",
  "BiocParallel",
  "UpSetR",
  "genefilter",
  "DESeq2",
  "openxlsx",
  "pheatmap",
  "org.Hs.eg.db",
  "ggplot2",
  "FactoMineR",
  "ggrepel",
  "apeglm",
  "viridis",
  "tidyverse",
  "kableExtra",
  "pheatmap",
  "EnhancedVolcano",
  "msigdbr"
)
BiocManager::install(packages)

library(DESeq2)
library(openxlsx)
library(pheatmap)
library(org.Hs.eg.db)
library(ggplot2)
library(FactoMineR)
library(ggrepel)
library(apeglm)
library(ggrepel)
library(viridis)
library(tidyverse)
library(kableExtra)
library(pheatmap)
library(genefilter)
library(EnhancedVolcano)
library(UpSetR)
library(msigdbr)
library(doMC) # falls es hiermit Probleme gibt könnt ihr das Paket auch weglassen
library(foreach) # falls es hiermit Probleme gibt könnt ihr das Paket auch weglassen
library(BiocParallel) # falls es hiermit Probleme gibt könnt ihr das Paket auch weglassen
# optional -> increase speed of analysis due to multicore processing
register(MulticoreParam(4)) # -> diese Zeile löschen, wenn es Probleme mit den Paketen doMC, foreach und/ oder BiocParallel gab
```

```{r}
#| echo: false
#| warning: false
## general config
mainDir <- "./"
analysisDir <- file.path(mainDir, "analysis")
degDIR <- file.path(analysisDir, "DEG")
gseaDIR <- file.path(analysisDir, "GSEA")
gageDIR <- file.path(analysisDir, "GSEA", "GAGE")
dir.create(degDIR, recursive = T)
dir.create(gageDIR, recursive = T)
setwd(mainDir)
```

```{r}
#| echo: false
ensembl2entrez <- function(ensembl) {
  entrez <- mget(as.character(ensembl), org.Hs.egENSEMBL2EG, ifnotfound = NA)
  entrez <- lapply(entrez, function(i) return(i[1]))
  return(unlist(entrez))
}

entrez2ensembl <- function(entrez) {
  esbl <- mget(as.character(entrez), org.Hs.egENSEMBL, ifnotfound = NA)
  esbl <- lapply(esbl, function(i) return(i[1]))
  return(unlist(esbl))
}

entrez2symbol <- function(entrez) {
  symbol <- mget(as.character(entrez), org.Hs.egSYMBOL, ifnotfound = NA)
  symbol <- unlist(lapply(symbol, function(i) return(i[1])))
  return(symbol)
}

entrez2genename <- function(entrez) {
  symbol <- mget(as.character(entrez), org.Hs.egGENENAME, ifnotfound = NA)
  symbol <- unlist(lapply(symbol, function(i) return(i[1])))
  return(symbol)
}

getGeneMat <- function(ensIDs) {
  geneMat <- data.frame(ENSEMBL=ensIDs)
  geneMat$ENTREZ <- ensembl2entrez(geneMat$ENSEMBL)
  idxNA <- !is.na(geneMat$ENTREZ)
  sym <- entrez2symbol(na.omit(geneMat$ENTREZ))
  genename <- entrez2genename(na.omit(geneMat$ENTREZ))
  geneMat$Symbol <- NA
  geneMat$Symbol[idxNA] <- sym
  geneMat$Genename <- NA
  geneMat$Genename[idxNA] <- genename
  rownames(geneMat) <- geneMat$ENSEMBL
  return(geneMat)
}
```

```{r}

## Importiert die Count-Daten und erstellt daraus eine Count-Matrix
# Alle .tab-Dateien einlesen
files <- list.files(pattern = "\\.tab$", full.names = TRUE)
sample_names <- tools::file_path_sans_ext(basename(files))

read_counts <- function(file) {
  read_tsv(file, skip = 4, col_names = c("GeneID", "Count1", "Count2", "Count3")) |>
    select(GeneID, Count1)
}

# Eine Liste mit Count-Daten je Datei
count_list <- map(files, read_counts)

# Count-Matrix erstellen (nur ENSEMBL IDs und Rohwerte)
count_matrix <- reduce(count_list, full_join, by = "GeneID") |>
  setNames(c("GeneID", sample_names)) |>
  column_to_rownames("GeneID")

## Erstellt eine Tabelle, die alle gemessenen Gene und all ihre verschiedenen IDs enthält.

# Gene (ENSEMBL-IDs) als Referenz extrahieren
gene_reference <- tibble(GeneID = rownames(count_matrix))

# Ordnet den Proben ihre biologische Bedingung zu

# Erstellt das DESeq2 Objekt und normalisiert die Daten

# Erstellt zwei QC Abbildungen, einmal mit den Roh-Counts und einmal mit den normalisierten Count-Werten.

```